#include <dht11.h> // dht11 k�t�phanesini ekliyoruz.
#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
  


const char* ssid = "ETUNET-asistan";
const char* password = "tobb1234";

const char server[] = "api.openweathermap.org";

String nameOfCity = "Ankara,TR"; 

String apiKey = "1918b0e1ea34ed0fe36248c70ed075a4"; 


int jsonend = 0;
boolean startJson = false;
int status = WL_IDLE_STATUS;

String text;

#define JSON_BUFF_DIMENSION 2500

const int plant_id = 1;
const String plant_name = "menek�e";
const String plant_type = "aerhurasia";
int status_water_engine = 0;
int moisture_air = 0;   // y�zde olarak veriyor
int moisture_soil = 0;  // 0-1024 aras� (y�zdeye �evirildi)
int temperature_air = 0;  // celcius
int frostbite = 0;   // �i� olu�ma noktas� y�zde
int light = 0;

const char* host = "omercalisma123.xyz";
String path_post = "";
const char* path_get = "/SmartFlowerpot/get_plant.php?id=1";

int DHT11_pin = 2; // DHT11_pin olarak Dijital 2'yi belirliyoruz.
int suMotoru_pin = 15;
dht11 DHT11_sensor; // DHT11_sensor ad�nda bir DHT11 nesnesi olu�turduk.
 
void setup()
{
text.reserve(JSON_BUFF_DIMENSION);

  Serial.begin(115200);
  pinMode(suMotoru_pin , OUTPUT);
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
}
 
void loop()
{
  digitalWrite(suMotoru_pin , LOW);
  DHT11_sensor.read(DHT11_pin);
  moisture_air = (int)DHT11_sensor.humidity;
  temperature_air = (int)DHT11_sensor.temperature; 
  frostbite = DHT11_sensor.dewPoint();
  moisture_soil = analogRead(A0);
  Serial.println(moisture_air);
  Serial.println(temperature_air);
  Serial.println(moisture_soil);
  Serial.println(frostbite);
  
  path_post = String("/SmartFlowerpot/update_plant.php?plant_id=")+plant_id+"&light="+light+"&temperature="+temperature_air+"&moisture_air="+moisture_air+"&moisture_soil="+moisture_soil+"&frostbite="+frostbite+"&water="+status_water_engine+"&name="+plant_name+"&type="+plant_type;

  WiFiClient client;

  Serial.printf("\n[Connecting to %s ... ", host);
  if (client.connect(host, 80))
  {
    Serial.println("connected]");

    Serial.println("[Sending a request]");
    client.print(String("POST ") + path_post + " HTTP/1.1\r\n" +
	client.println("GET /data/2.5/forecast?q=" + nameOfCity + "&APPID=" + apiKey + "&mode=json&units=metric&cnt=2 HTTP/1.1");
           "Host: " + host + "\r\n" + 
           "Connection: close\r\n\r\n");

    Serial.println("[Response:]");
    while (client.connected() || client.available())
    {
      if (client.available())
      {
        String line = client.readStringUntil('\n');
        Serial.println(line);
      }
    }
    client.stop();
    Serial.println("\n[Disconnected]");
  }
  else
  {
    Serial.println("connection failed!]");
    client.stop();
  }
  
  char c = 0;
    while (client.available()) {
      c = client.read();
    
      if (c == '{') {
        startJson = true;         
        jsonend++;
      }
      if (c == '}') {
        jsonend--;
      }
      if (startJson == true) {
        text += c;
      }

      if (jsonend == 0 && startJson == true) {
        parseJson(text.c_str());  
        text = "";               
        startJson = false;       
      }
  
  
  delay(5000);
}

void parseJson(const char * jsonString) {
  //StaticJsonBuffer<4000> jsonBuffer;
  const size_t bufferSize = 2*JSON_ARRAY_SIZE(1) + JSON_ARRAY_SIZE(2) + 4*JSON_OBJECT_SIZE(1) + 3*JSON_OBJECT_SIZE(2) + 3*JSON_OBJECT_SIZE(4) + JSON_OBJECT_SIZE(5) + 2*JSON_OBJECT_SIZE(7) + 2*JSON_OBJECT_SIZE(8) + 720;
  DynamicJsonBuffer jsonBuffer(bufferSize);


  JsonObject& root = jsonBuffer.parseObject(jsonString);
  if (!root.success()) {
    Serial.println("parseObject() failed");
    return;
  }

  JsonArray& list = root["list"];
  JsonObject& nowT = list[0];
  JsonObject& later = list[1];


  
  String city = root["city"]["name"];
  
  float tempNow = nowT["main"]["temp"];
  float humidityNow = nowT["main"]["humidity"];
  String weatherNow = nowT["weather"][0]["description"];

  float tempLater = later["main"]["temp"];
  float humidityLater = later["main"]["humidity"];
  String weatherLater = later["weather"][0]["description"];

  // checking for four main weather possibilities
  HavaDurumuTipi(weatherNow, weatherLater, "acik");
  HavaDurumuTipi(weatherNow, weatherLater, "yagmurlu");
  HavaDurumuTipi(weatherNow, weatherLater, "karli");
  HavaDurumuTipi(weatherNow, weatherLater, "dolu");
  
  Serial.println();
}


void HavaDurumuTipi(String nowT, String later, String weatherType) {

  int indexNow = nowT.indexOf(weatherType);
  int indexLater = later.indexOf(weatherType);
  
  
  if (weatherType == "yagmurlu") { 
    if (indexNow == -1 && indexLater != -1) {
     
      Serial.println("Dikkat gorunuse gore" + weatherType + " bekleniyor.Bitkini sulamana gerek yok. " + later);
    }
  }
  // for snow
  else if (weatherType == "karli") {
    if (indexNow == -1 && indexLater != -1) {
     
      Serial.println("Dikkat gorunuse gore" + weatherType + " bekleniyor.Bitkini güvenli bir yerde saklamalısın. " + later);
    }
    
  }
 
  else if (weatherType == "dolu") { 
   if (indexNow == -1 && indexLater != -1) {
  
      Serial.println("Dikkat gorunuse gore" + weatherType + " bekleniyor.Bitkini güvenle bir yerde saklamalısın." + later);
   }

  }
  
  else {
    if (indexNow == -1 && indexLater != -1) {
      Serial.println("Hava gunesli gozukuyor! Korkacak bir sey yok.Bitkini sulamayı unutma!" + later);
    
    }
  }

